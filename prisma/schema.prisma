// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Series {
  id String @id @default(cuid())
  name String @unique
  books Book[]
}

model Book {
  id String @id @default(cuid())
  title String
  description String
  completed Boolean
  publishDate DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  seriesId String?

  series Series? @relation(fields: [seriesId], references: [id], onDelete: SetNull)
  links BookLink[]
}

model BookLink {
  id String @id @default(cuid())
  type LinkType
  url String
  bookId String

  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)
}

enum LinkType {
  amazon
  goodreads
  other
}

model Post {
  id          String   @id @default(cuid())
  type        PostType
  title       String
  slug        String   @unique @db.VarChar(120)
  content     String
  publishedAt DateTime
  pinned      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Event-specific
  eventStart DateTime?
  eventEnd   DateTime?
  eventLocation   String?

  tags Tag[] @relation("PostTags")
}

model Tag {
  id String @id @default(cuid())
  name String @unique
  posts Post[] @relation("PostTags")
}

enum PostType {
  blog
  news
  event
}

model Social {
  id String @id @default(cuid())
  platform SocialPlatform
  displayName String
  url String
}

enum SocialPlatform {
  patreon
  kofi
  tumblr
  facebook
}

model Page {
  id String @id @default(cuid())
  slug String @unique @db.VarChar(120)
  title String
  name String
  content String
  updatedAt DateTime @updatedAt
}